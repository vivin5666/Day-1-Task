objects and its internal representation in Javascript


=> In JavaScript, is it’s most important data-type and forms the building blocks for modern JavaScript. 
=> These Objects are quite different from JavaScript primitive data-types (Number,String,Boolean,null,undefined and symbol) in the sense 
   that while these primitive data-type all stores a single value each
=> Objects are more complex and each object may contain any combination of these primitive data-types as well as reference data-types.
=> An object, is a reference data type. Variables that are assigned a reference value are given a reference or a pointer to that value.
=> That reference or pointer points to the location in memory where the object is stored. The variables don’t actually store the value.
=> Loosely speaking, objects in JavaScript may be defined as an unordered collection of related data, of primitive or reference types, in the form of “key: value” pairs. 
=> These keys can be variables or functions and are called properties and methods, respectively, in the context of an object.
=> An object can be created with figure brackets {…} with an optional list of properties.
=> A property is a “key: value” pair, where a key is a string (also called a “property name”), and value can be anything.
=> Each of these keys is referred to as properties of the object. An object in JavaScript may also have a function as a member, 
   in which case it will be known as a method of that object.
=> All objects created in this way inherits all properties and methods from its prototype objects. 
=> This chain terminates with the Object.prototype which is the default prototype fallback for all objects. 
=> Javascript objects, by default, inherit properties and methods from Object.prototype but these may easily be overridden. 
=> It is also interesting to note that the default prototype is not always Object.prototype

